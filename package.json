{
  "name": "vscode-catch2-test-adapter",
  "displayName": "Catch2, Google Test and DOCtest Explorer",
  "description": "Run Catch2, GoogleTest and DOCtest tests from VSCode",
  "icon": "resources/icon.png",
  "author": "Mate Pek",
  "publisher": "matepek",
  "version": "2.8.7",
  "license": "MIT",
  "homepage": "https://github.com/matepek/vscode-catch2-test-adapter",
  "repository": {
    "type": "git",
    "url": "https://github.com/matepek/vscode-catch2-test-adapter.git"
  },
  "bugs": {
    "url": "https://github.com/matepek/vscode-catch2-test-adapter/issues"
  },
  "categories": [
    "Other"
  ],
  "keywords": [
    "c++",
    "test",
    "testing",
    "unit test",
    "catch2",
    "catchorg",
    "google",
    "googletest",
    "google test",
    "gtest",
    "doctest",
    "onqtam"
  ],
  "main": "out/dist/main.js",
  "scripts": {
    "postinstall": "node ./node_modules/vscode/bin/install",
    "reinstall": "rimraf node_modules package-lock.json && npm install",
    "clean": "rimraf out node_modules vscode-catch2-test-adapter-*.vsix",
    "watch": "tsc -watch -p ./tsconfig.json",
    "compile": "tsc -p ./tsconfig.json",
    "test": "node ./out/test/runTests.js",
    "pretest": "npm run compile",
    "package": "vsce package",
    "deploy": "node ./out/test/repo_scripts/deploy.js",
    "vscode:prepublish": "webpack --config webpack.config.js --mode production",
    "webpack": "webpack --config webpack.config.js --mode development"
  },
  "extensionDependencies": [
    "hbenl.vscode-test-explorer"
  ],
  "dependencies": {
    "@sentry/node": "^5.12.4",
    "debounce-collect": "^1.0.2",
    "entities": "^1.1.2",
    "chokidar": "^3.3.1",
    "tslib": "^1.11.0",
    "vscode-test-adapter-api": "^1.8.0",
    "vscode-test-adapter-util": "^0.7.0",
    "webpack-cli": "^3.3.11",
    "xml2js": "^0.4.23"
  },
  "devDependencies": {
    "@types/chai": "^4.2.9",
    "@types/deep-equal": "^1.0.1",
    "@types/entities": "^1.1.1",
    "@types/fs-extra": "^7.0.0",
    "@types/mocha": "^5.2.7",
    "@types/node": "^12.12.28",
    "@types/request-promise": "4.1.43",
    "@types/sinon": "^7.5.2",
    "@types/xml2js": "^0.4.5",
    "@typescript-eslint/eslint-plugin": "^1.13.0",
    "@typescript-eslint/parser": "^1.13.0",
    "deep-equal": "^1.1.1",
    "eslint": "^5.16.0",
    "eslint-config-prettier": "^4.3.0",
    "eslint-plugin-prettier": "^3.1.2",
    "fs-extra": "^7.0.1",
    "mocha-eslint": "^5.0.0",
    "prettier": "^1.19.1",
    "raw-loader": "^2.0.0",
    "request-promise": "4.2.4",
    "sinon": "^7.5.0",
    "ts-loader": "^6.2.1",
    "typescript": "^3.8.2",
    "vsce": "^1.73.0",
    "vscode": "^1.1.36",
    "vscode-test": "^1.3.0",
    "webpack": "^4.41.6",
    "webpack-bundle-analyzer": "^3.6.0"
  },
  "engines": {
    "vscode": "^1.23.0"
  },
  "activationEvents": [
    "onView:test-explorer",
    "onCommand:test-explorer.reload",
    "onCommand:test-explorer.run-all",
    "onCommand:test-explorer.run-file",
    "onCommand:test-explorer.run-test-at-cursor",
    "onCommand:test-explorer.rerun",
    "onCommand:test-explorer.debug-test-at-cursor",
    "onCommand:test-explorer.redebug",
    "onCommand:test-explorer.cancel"
  ],
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "Configuration for the 'Catch2 and Google Test Explorer' extension",
      "$comment": "Enums will cause that the vscode will offer auto-completion.",
      "properties": {
        "catch2TestExplorer.executables": {
          "markdownDescription": "The location of your test executables (relative to the workspace folder or absolute path) and with a lot of other setting. [Details](https://github.com/matepek/vscode-catch2-test-adapter#catch2TestExplorerexecutables)",
          "description": "The location of your test executables (relative to the workspace folder or absolute path) and with a lot of other setting. [Details](https://github.com/matepek/vscode-catch2-test-adapter#catch2TestExplorerexecutables)",
          "scope": "resource",
          "default": [
            {
              "pattern": "{build,Build,BUILD,out,Out,OUT}/**/*{test,Test,TEST}*"
            }
          ],
          "oneOf": [
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "oneOf": [
                  {
                    "description": "An object with 'pattern'.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "pattern": {
                        "description": "A relative (to workspace directory) or an absolute path or [_glob pattern_](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options). ‚ö†Ô∏è**Avoid backslash!**: üö´`\\`; ‚úÖ`/`; (required)",
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "{build,Build,BUILD,out,Out,OUT}/**/*{test,Test,TEST}*",
                              "{build,Build,BUILD,out,Out,OUT}/**/*{test,Test,TEST}*.exe"
                            ]
                          },
                          {
                            "type": "string",
                            "minLength": 1
                          }
                        ]
                      },
                      "name": {
                        "description": "The name of the test suite (file). Can contains variables related to `pattern`.",
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "${filename}",
                              "${relPath}",
                              "${absPath}"
                            ]
                          },
                          {
                            "type": "string",
                            "minLength": 1
                          }
                        ]
                      },
                      "description": {
                        "description": "A less prominent text after the `name`. Can contains variables related to `pattern`.",
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "${relDirpath}/",
                              "${absDirpath}/"
                            ]
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "cwd": {
                        "description": "The current working directory for the test executable. If it isn't provided and `defaultCwd` does, then that will be used. Can contains variables related to `pattern`.",
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "${absDirpath}",
                              "${relDirpath}",
                              "${workspaceDirectory}",
                              "${workspaceFolder}"
                            ]
                          },
                          {
                            "type": "string",
                            "minLength": 1
                          }
                        ]
                      },
                      "env": {
                        "type": "object",
                        "description": "Environment variables for the test executable. If it isn't provided and `defaultEnv` does, then that will be used. Can contains variables related to `pattern` and variables related to the process's environment variables (Ex.: `${os_env:PATH}`).",
                        "additionalProperties": {
                          "anyOf": [
                            {
                              "type": "string",
                              "enum": [
                                "${absPath}",
                                "${relPath}",
                                "${absDirpath}",
                                "${relDirpath}",
                                "${filename}",
                                "${baseFilename}",
                                "${extFilename}",
                                "${workspaceDirectory}",
                                "${workspaceFolder}",
                                "${workspaceName}",
                                "${name}",
                                "${description}",
                                "${cwd}",
                                "${os_env:PATH}"
                              ]
                            },
                            {
                              "type": "string",
                              "minLength": 1
                            }
                          ]
                        }
                      },
                      "dependsOn": {
                        "description": "Array of (relative / absolute) _paths_ / [_glob pattern_](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) (string[]). If a related file is _changed/created/deleted_ and autorun is enabled in \"...\" menu it will run the related executables.",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "minLength": 1
                        }
                      },
                      "catch2": {
                        "description": "Object with framework specific settings. See [here](#Framework-specific-settings).",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "helpRegex": {
                            "description": "A javascript [regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions) which will be used to recognise the framework. Flags: `su`.",
                            "type": "string",
                            "minLength": 1
                          },
                          "additionalRunArguments": {
                            "description": "Additinal argument array passed to the executable when it is called for testing. Good for experimental features like `[\"--benchmark-samples\", \"10\"]`.",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "ignoreTestEnumerationStdErr": {
                            "description": "If false (or undefined) and there are something on `stderr` then test-listing will fail. Otherwise it will ignore the `stderr` and test listing will try to parse the `stdout`.",
                            "type": "boolean"
                          }
                        }
                      },
                      "gtest": {
                        "description": "Object with framework specific settings. See [here](#Framework-specific-settings).",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "helpRegex": {
                            "description": "A javascript [regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions) which will be used to recognise the framework. Flags: `su`.",
                            "type": "string",
                            "minLength": 1
                          },
                          "additionalRunArguments": {
                            "description": "Additinal argument array passed to the executable when it is called for testing. Good for experimental features like `[\"--benchmark-samples\", \"10\"]`.",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "ignoreTestEnumerationStdErr": {
                            "description": "If false (or undefined) and there are something on `stderr` then test-listing will fail. Otherwise it will ignore the `stderr` and test listing will try to parse the `stdout`.",
                            "type": "boolean"
                          }
                        }
                      },
                      "doctest": {
                        "description": "Object with framework specific settings. See [here](#Framework-specific-settings).",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "helpRegex": {
                            "description": "A javascript [regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions) which will be used to recognise the framework. Flags: `su`.",
                            "type": "string",
                            "minLength": 1
                          },
                          "additionalRunArguments": {
                            "description": "Additinal argument array passed to the executable when it is called for testing. Good for experimental features like `[\"--benchmark-samples\", \"10\"]`.",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "ignoreTestEnumerationStdErr": {
                            "description": "If false (or undefined) and there are something on `stderr` then test-listing will fail. Otherwise it will ignore the `stderr` and test listing will try to parse the `stdout`.",
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "required": [
                      "pattern"
                    ]
                  },
                  {
                    "description": "A relative (to workspace directory) or an absolute path or [_glob pattern_](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options). ‚ö†Ô∏è**Avoid backslash!**: üö´`\\`; ‚úÖ`/`; (required)",
                    "type": "string",
                    "minLength": 1
                  }
                ]
              }
            },
            {
              "description": "A relative (to workspace directory) or an absolute path or [_glob pattern_](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options). ‚ö†Ô∏è**Avoid backslash!**: üö´`\\`; ‚úÖ`/`; (required)",
              "type": "string",
              "minLength": 1
            },
            {
              "description": "null means it is disabled",
              "type": "null"
            }
          ]
        },
        "catch2TestExplorer.defaultCwd": {
          "markdownDescription": "The working directory where the test is run (relative to the workspace folder or absolute path), if it isn't provided in \"executables\". (It resolves variables.)",
          "description": "The working directory where the test is run (relative to the workspace folder or absolute path), if it isn't provided in \"executables\". (It resolves variables.)",
          "scope": "resource",
          "type": "string",
          "default": "${absDirpath}",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "${absDirpath}",
                "${relDirpath}",
                "${workspaceDirectory}",
                "${workspaceFolder}"
              ]
            },
            {
              "type": "string",
              "minLength": 1
            }
          ]
        },
        "catch2TestExplorer.defaultEnv": {
          "markdownDescription": "Environment variables to be set when running the tests. (It resolves variables.)",
          "description": "Environment variables to be set when running the tests. (It resolves variables.)",
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "${absPath}",
                  "${relPath}",
                  "${absDirpath}",
                  "${relDirpath}",
                  "${filename}",
                  "${baseFilename}",
                  "${extFilename}",
                  "${workspaceDirectory}",
                  "${workspaceFolder}",
                  "${workspaceName}",
                  "${name}",
                  "${description}",
                  "${cwd}"
                ]
              },
              {
                "type": "string",
                "minLength": 1
              }
            ]
          },
          "default": {},
          "scope": "resource"
        },
        "catch2TestExplorer.defaultRngSeed": {
          "markdownDescription": "Shuffles the tests with the given random. Catch2: [--rng-seed (<integer> or 'time')](https://github.com/catchorg/Catch2/blob/master/docs/command-line.md#rng-seed); Google Test: [--gtest_random_seed=<integer>](https://github.com/google/googletest/blob/master/googletest/docs/advanced.md#shuffling-the-tests);",
          "description": "Shuffles the tests with the given random. Catch2: [--rng-seed (<integer> or 'time')](https://github.com/catchorg/Catch2/blob/master/docs/command-line.md#rng-seed); Google Test: [--gtest_random_seed=<integer>](https://github.com/google/googletest/blob/master/googletest/docs/advanced.md#shuffling-the-tests);",
          "scope": "resource",
          "default": null,
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "enum": [
                "time"
              ]
            }
          ]
        },
        "catch2TestExplorer.defaultWatchTimeoutSec": {
          "markdownDescription": "Test executables are being watched (only inside the workspace directory). In case of one recompiles it will try to preserve the test states. If compilation reaches timeout it will drop the suite.",
          "description": "Test executables are being watched (only inside the workspace directory). In case of one recompiles it will try to preserve the test states. If compilation reaches timeout it will drop the suite.",
          "scope": "resource",
          "type": "integer",
          "default": 10,
          "minimum": 1
        },
        "catch2TestExplorer.retireDebounceTimeMilisec": {
          "markdownDescription": "Retire events will be held back for the given duration. (Reload is required)",
          "description": "Retire events will be held back for the given duration. (Reload is required)",
          "scope": "resource",
          "type": "integer",
          "default": 1000,
          "minimum": 200
        },
        "catch2TestExplorer.defaultRunningTimeoutSec": {
          "markdownDescription": "Test executable is running in a process. In case of an infinite loop, it will run forever, unless this parameter is set. It applies instantly. (0 means infinite)",
          "description": "Test executable is running in a process. In case of an infinite loop, it will run forever, unless this parameter is set. It applies instantly. (0 means infinite)",
          "scope": "resource",
          "type": "integer",
          "default": 600,
          "minimum": -1
        },
        "catch2TestExplorer.defaultExecParsingTimeoutSec": {
          "markdownDescription": "The timeout duration (in seconds) of the test-executable identifier (Calls the exec with `--help`).",
          "description": "The timeout duration (in seconds) of the test-executable identifier (Calls the exec with `--help`).",
          "scope": "resource",
          "type": "integer",
          "default": 5,
          "minimum": 1,
          "maximum": 900
        },
        "catch2TestExplorer.workerMaxNumber": {
          "markdownDescription": "The variable maximize the number of the parallel test execution. It applies instantly.",
          "description": "The variable maximize the number of the parallel test execution. It applies instantly.",
          "scope": "resource",
          "type": "integer",
          "default": 1,
          "minimum": 1
        },
        "catch2TestExplorer.debugConfigTemplate": {
          "markdownDescription": "Set the necessary debug configurations and the debug button will work. [Details](https://github.com/matepek/vscode-catch2-test-adapter#catch2TestExplorerdebugConfigTemplate)",
          "description": "Set the necessary debug configurations and the debug button will work. [Details](https://github.com/matepek/vscode-catch2-test-adapter#catch2TestExplorerdebugConfigTemplate)",
          "scope": "resource",
          "default": null,
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "type": "string",
                    "enum": [
                      "${label}",
                      "${suiteLabel}",
                      "${exec}",
                      "${argsArray}",
                      "${argsStr}",
                      "${cwd}",
                      "${envObj}"
                    ]
                  },
                  {
                    "type": "string",
                    "minLength": 1
                  },
                  {
                    "type": "array"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "null"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "object"
                  }
                ]
              }
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "enum": [
                "extensionOnly"
              ]
            }
          ]
        },
        "catch2TestExplorer.debugBreakOnFailure": {
          "markdownDescription": "Debugger breaks on failure while debugging the test. Catch2: [--break](https://github.com/catchorg/Catch2/blob/master/docs/command-line.md#breaking-into-the-debugger); Google Test: [--gtest_break_on_failure](https://github.com/google/googletest/blob/master/googletest/docs/advanced.md#turning-assertion-failures-into-break-points);",
          "description": "Debugger breaks on failure while debugging the test. Catch2: [--break](https://github.com/catchorg/Catch2/blob/master/docs/command-line.md#breaking-into-the-debugger); Google Test: [--gtest_break_on_failure](https://github.com/google/googletest/blob/master/googletest/docs/advanced.md#turning-assertion-failures-into-break-points);",
          "scope": "resource",
          "type": "boolean",
          "default": true
        },
        "catch2TestExplorer.defaultNoThrow": {
          "markdownDescription": "Skips all assertions that test that an exception is thrown, e.g. REQUIRE_THROWS. This is a Catch2 parameter: [--nothrow](https://github.com/catchorg/Catch2/blob/master/docs/command-line.md#eliding-assertions-expected-to-throw);",
          "description": "Skips all assertions that test that an exception is thrown, e.g. REQUIRE_THROWS. This is a Catch2 parameter: [--nothrow](https://github.com/catchorg/Catch2/blob/master/docs/command-line.md#eliding-assertions-expected-to-throw);",
          "scope": "resource",
          "type": "boolean",
          "default": false
        },
        "catch2TestExplorer.logpanel": {
          "markdownDescription": "Creates a new output channel and write the log messages there. For debugging. Enabling it could slow down your vscode.",
          "description": "Creates a new output channel and write the log messages there. For debugging. Enabling it could slow down your vscode.",
          "scope": "resource",
          "type": "boolean",
          "default": false
        },
        "catch2TestExplorer.logfile": {
          "markdownDescription": "Writes the log message into the given file. Empty means disabled.",
          "description": "Writes the log message into the given file. Empty means disabled.",
          "scope": "resource",
          "type": "string",
          "default": ""
        },
        "catch2TestExplorer.logSentry": {
          "markdownDescription": "Errors/Exceptions will be logged and sent automatically for further analysis.",
          "description": "Errors/Exceptions will be logged and sent automatically for further analysis.",
          "scope": "resource",
          "type": "string",
          "default": "question",
          "enum": [
            "question",
            "enable",
            "disable",
            "disable_1"
          ]
        },
        "catch2TestExplorer.userId": {
          "description": "A locally generated identifier which is used to group the errors/events.",
          "scope": "resource",
          "type": "string",
          "default": ""
        },
        "catch2TestExplorer.enableTestListCaching": {
          "markdownDescription": "(Experimental) In case your executable took too much time to list the tests, one can set this. It will preserve the output of `--gtest_list_tests --gtest_output=xml:...`. (Beware: Older Google Test doesn't support xml test list format.) (Click [here](http://bit.ly/2HFcAC6), if you think it is a useful feature!)",
          "description": "(Experimental) In case your executable took too much time to list the tests, one can set this. It will preserve the output of `--gtest_list_tests --gtest_output=xml:...`. (Beware: Older Google Test doesn't support xml test list format.) (Click [here](http://bit.ly/2HFcAC6), if you think it is a useful feature!)",
          "scope": "resource",
          "type": "boolean",
          "default": false
        },
        "catch2TestExplorer.googletest.treatGmockWarningAs": {
          "markdownDescription": "Forces the test to be failed even it is passed if it contains the string `GMOCK_WARNING:`. (You may should consider using [testing::StrictMock<T>](https://github.com/google/googletest/blob/master/googlemock/docs/cook_book.md#the-nice-the-strict-and-the-naggy-nicestrictnaggy))",
          "description": "Forces the test to be failed even it is passed if it contains the string `GMOCK_WARNING:`. (You may should consider using [testing::StrictMock<T>](https://github.com/google/googletest/blob/master/googlemock/docs/cook_book.md#the-nice-the-strict-and-the-naggy-nicestrictnaggy))",
          "scope": "resource",
          "type": "string",
          "default": "nothing",
          "enum": [
            "nothing",
            "failure"
          ],
          "enumDescriptions": [
            "",
            "Forces the test to be failed even it is passed if it contains the string `GMOCK_WARNING:`."
          ]
        },
        "catch2TestExplorer.googletest.gmockVerbose": {
          "markdownDescription": "Sets [--gmock_verbose=...](https://github.com/google/googletest/blob/master/googlemock/docs/cheat_sheet.md#flags). (Note: executable has to be linked to gmock `gmock_main` not `gtest_main`)",
          "description": "Sets [--gmock_verbose=...](https://github.com/google/googletest/blob/master/googlemock/docs/cheat_sheet.md#flags). (Note: executable has to be linked to gmock `gmock_main` not `gtest_main`)",
          "scope": "resource",
          "type": "string",
          "default": "default",
          "enum": [
            "default",
            "info",
            "warning",
            "error"
          ],
          "enumDescriptions": [
            "--gmock_verbose=... parameter won't be added",
            "Google Mock will print all informational messages, warnings, and errors (most verbose). At this setting, Google Mock will also log any calls to the ON_CALL/EXPECT_CALL macros.",
            "Google Mock will print both warnings and errors (less verbose). This is the default.",
            "Google Mock will print errors only (least verbose)."
          ]
        }
      }
    }
  }
}
